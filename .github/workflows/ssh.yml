name: remote ssh command
# on: [push]
#   release:
#     types: [created]
# 릴리즈 테스트
on:
  release:
    types: [published]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - run: echo "해당 깃헙 릴리즈 태그 아이디 ${{ github.event.release.tag_name }}"
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
  asset:
    name: 🚚 Asset download and host upload
    runs-on: ubuntu-latest
    steps:
    - name: 🚚 Get latest code
      uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: "${{ github.repository }}"
        version: "tags/${{ github.event.release.tag_name }}"
        file: "assets.zip"
        target: "assets.zip"
        token: ${{ secrets.TOKEN }}

    - name: dir test
      run: ls -al
    
    - name: 📂 Sync files to Server2
      uses: AEnterprise/rsync-deploy@v1.0
      env:
        DEPLOY_KEY: ${{ secrets.KEY }}
        SERVER_PORT: ${{ secrets.RSYNC_PORT }}
        FOLDER: "./"
        ARGS: "-rltgoDzvO --delete"
        SERVER_IP: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
        SERVER_DESTINATION: "/volume1/docker/${{ secrets.PROJECT_TYPE }}/${{ secrets.PROJECT_DIR }}/test"

  source:
    name: 📮 update source Github 'git pull'
    runs-on: ubuntu-latest
    steps:

    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd ${{ secrets.PROJECT_TYPE }}/${{ secrets.PROJECT_DIR }}
          ls -al
